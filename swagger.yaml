---
swagger: "2.0"
info:
  description: "Api for Unity - Swagger"
  version: "1.0.0"
  title: "Unity Swagger"
host: "localhost:3000"
basePath: "/api"
tags:
- name: "user"
  description: "User Information"
- name: "monster"
  description: "Monster Information"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Add new User"
      description: ""
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user object"
        required: true
        schema:
          $ref: "#/definitions/body_1"
      responses:
        200:
          description: "Success"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Update User"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "user object"
        required: true
        schema:
          $ref: "#/definitions/body"
      responses:
        200:
          description: "Successfully load user info"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200"
        400:
          description: "Invalid userId"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
  /users:
    get:
      tags:
      - "user"
      summary: "Get all user list"
      description: ""
      operationId: "userList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successfully load user info"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200"
        404:
          description: "user not found"
      x-swagger-router-controller: "User"
  /user/{userId}:
    get:
      tags:
      - "user"
      summary: "Get user Info by userId"
      description: ""
      operationId: "getUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "user1 for test"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successfully load user info"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200"
        400:
          description: "Invalid userId"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    x-swagger-router-controller: "User"
  /monsters:
    get:
      tags:
      - "monster"
      summary: "Get Monster List"
      description: ""
      operationId: "monsterList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "Successfully Load Monster List"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/inline_response_200_1"
      x-swagger-router-controller: "Monster"
    x-swagger-router-controller: "Monster"
definitions:
  user:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "hogehoge"
      password:
        type: "string"
  monster:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "hogehoge"
      type:
        type: "string"
        example: "fire"
      rank:
        type: "integer"
        format: "int64"
        example: 3
  body:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "hogehoge"
      password:
        type: "string"
  inline_response_200:
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "hogehoge"
      password:
        type: "string"
  body_1:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "hogehoge"
      password:
        type: "string"
  inline_response_200_1:
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 1
      name:
        type: "string"
        example: "hogehoge"
      type:
        type: "string"
        example: "fire"
      rank:
        type: "integer"
        format: "int64"
        example: 3
